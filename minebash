#!/usr/bin/env python3
#TODO: highscore, monochrome, flags red if too many
import random, io, sys, time, os

import curses
from curses import wrapper

NOTHING = 0
MINE = -1
FLAG = -2
UNKNOWN = -3
FLAG_MINE = -4

score_x, score_y = 0, 0
CURSOR_POSITION=[0,0]

OFFSET = 11

STARTTIME = 0

SCREEN = 0

firstmove = False
FIELD_GENERATED = False

FIELDS_CLEARED = 0

width, height = 9, 9
MINECOUNT = 10
FLAGCOUNT = 0

clWhite, clRed, clCyan, clBlue, clYellow, clGreen, clInverted = None, None, None, None, None, None, None #can only be setup after curses has loaded

difficulty = 'medium'

param_error = 'minebash: Invalid parameters. See \'minebash help\' for help '
helpstr = '''Usage: minebash [easy|medium|hard] [width height minecount]
    
Difficulty presets:
    easy:    5x5  4 mines
    medium:  9x9 15 mines
    hard:  12x12 35 mines
Specify your own:
    4 4 4    4x4  4 mines
    8 8 10   8x8  10 mines

Controls:
    Arrow Keys: Move Cursor
    Spacebar:   Try field
    F:          Place flag 
'''

if len(sys.argv) > 1:
    if len(sys.argv) == 2: #param is string like easy, hard
        if sys.argv[1] == 'help':
            print(helpstr)
            sys.exit(0)
        if sys.argv[1] == 'easy':
            width = 5
            height = 5
            MINECOUNT = 4
        elif sys.argv[1] == 'medium':
            width = 9
            height = 9
            MINECOUNT = 15
        elif sys.argv[1] == 'hard':
            width = 12
            height = 12
            MINECOUNT = 35
        else:
            print(param_error)
            sys.exit(0)
        difficulty = sys.argv[1] 
    elif len(sys.argv) == 4: #this means the user has specified width, height and minecount
        width = int(sys.argv[1])
        height = int(sys.argv[2])
        if int(sys.argv[3]) < width*height:
            MINECOUNT = int(sys.argv[3])
            difficulty = 'custom'
        else:
            print('Minecount muss be less than width x height.')
            system.exit(0)
    else:
        print(param_error)
        sys.exit(0)
playfield = [[UNKNOWN for x in range(width)] for y in range(height)]

headline = '┌'
midline  = '├'
tailline = '└'

def setup_strings(colcount):
    #setup lines to print at the end and start of the matrix, aswell as between rows
    global headline, midline, tailline
    headline = '┌' + "".join('───┬' for i in range(width-1)) + '───┐'
    midline  = '├' + ''.join('───┼' for i in range(width-1)) + '───┤'  
    tailline = '└' + ''.join('───┴' for i in range(width-1)) + '───┘' 

def endgame(msg=''):
    if msg != '':
        print(msg)
    sys.exit(0)

def calculate_hint(col, row):
    hint = 0
    if playfield[row][col] != MINE:
        #step through the surrounding 8 (or less) fields
        for x in range(col-1, col+2):
            if x >= 0 and x < len(playfield):
                for y in range(row-1, row+2):
                    if y >= 0 and y < len(playfield[0]):
                        if playfield[y][x] == MINE or playfield[y][x] == FLAG_MINE:
                            #add the mines together
                            hint+=1
    else:
        hint = MINE
    return hint

def setup_playfield(w, h, x, y):
    global playfield, FIELD_GENERATED, STARTTIME

    minesleft = MINECOUNT
    #randomly distribute mines across the field
    while minesleft > 0:
        randx = random.randint(0, width-1)
        randy = random.randint(0, height-1)
        #make sure the users first guess isn't a mine
        if playfield[randy][randx] != MINE and ([randx, randy] != CURSOR_POSITION):
            playfield[randy][randx] = MINE
            minesleft -= 1
    FIELD_GENERATED = True
    STARTTIME = time.time()

def gameover(win):
    SCREEN.clear()
    if not win:
        SCREEN.addstr(0, 0, r'                               ________________')
        SCREEN.addstr(1, 0, r'                          ____/ (  (    )   )  \___')
        SCREEN.addstr(2, 0, r'                         /( (  (  )   _    ))  )   )\ ')
        SCREEN.addstr(3, 0, r'                       ((     (   )(    )  )   (   )  )')
        SCREEN.addstr(4, 0, r'                     ((/  ( _(   )   (   _) ) (  () )  )')
        SCREEN.addstr(5, 0, r'                    ( (  ( (_)   ((    (   )  .((_ ) .  )_')
        SCREEN.addstr(6, 0, r'                   ( (  )    (      (  )    )   ) . ) (   )')
        SCREEN.addstr(7, 0, r'                  (  (   (  (   ) (  _  ( _) ).  ) . ) ) ( )')
        SCREEN.addstr(8, 0, r'                  ( (  (   ) (  )   (  ))     ) _)(   )  )  )')
        SCREEN.addstr(9, 0, r'                 ( (  ( \ ) (    (_  ( ) ( )  )   ) )  )) ( )')
        SCREEN.addstr(10, 0, r'                  (  (   (  (   (_ ( ) ( _    )  ) (  )  )   )')
        SCREEN.addstr(11, 0, r'                 ( (  ( (  (  )     (_  )  ) )  _)   ) _( ( )')
        SCREEN.addstr(12, 0, r'                  ((  (   )(    (     _    )   _) _(_ (  (_ )')
        SCREEN.addstr(13, 0, r'                   (_((__(_(__(( ( ( |  ) ) ) )_))__))_)___)')
        SCREEN.addstr(14, 0, r'                   ((__)        \\||lll|l||///          \_))')
        SCREEN.addstr(15, 0, r'                            (   /(/ (  )  ) )\   )')
        SCREEN.addstr(16, 0, r'                          (    ( ( ( | | ) ) )\   )')
        SCREEN.addstr(17, 0, r'                           (   /(| / ( )) ) ) )) )')
        SCREEN.addstr(18, 0, r'                         (     ( ((((_(|)_)))))     )')
        SCREEN.addstr(19, 0, r'                          (      ||\(|(|)|/||     )')
        SCREEN.addstr(20, 0, r'                        (        |(||(||)||||        )')
        SCREEN.addstr(21, 0, r'                          (     //|/l|||)|\\ \     )')
        SCREEN.addstr(22, 0, r'                        (/ / //  /|//||||\\  \ \  \ _)')        
        SCREEN.addstr(23, 0, '                  You lose! Press Q to quit, or R to restart!')
    else:
        now = time.time()
        elapsed = now - STARTTIME
        mins = elapsed / 60
        secs = elapsed % 60
        secstr = str(round(secs, 2))
        while len(secstr) < 4: secstr += '0' #to avoid a time of 0:001.5
        winstr = 'You win! It took you {}:{} to bash the field!'.format(int(mins), secstr.zfill(5)).zfill(7)
        SCREEN.addstr(0, 0, ' /$$      /$$           /$$ /$$       /$$$$$$$                                /$$')
        SCREEN.addstr(1, 0, '| $$  /$ | $$          | $$| $$      | $$__  $$                              | $$')
        SCREEN.addstr(2, 0, '| $$ /$$$| $$  /$$$$$$ | $$| $$      | $$  \ $$  /$$$$$$  /$$$$$$$   /$$$$$$ | $$')
        SCREEN.addstr(3, 0, '| $$/$$ $$ $$ /$$__  $$| $$| $$      | $$  | $$ /$$__  $$| $$__  $$ /$$__  $$| $$')
        SCREEN.addstr(4, 0, '| $$$$_  $$$$| $$$$$$$$| $$| $$      | $$  | $$| $$  \ $$| $$  \ $$| $$$$$$$$|__/')
        SCREEN.addstr(5, 0, '| $$$/ \  $$$| $$_____/| $$| $$      | $$  | $$| $$  | $$| $$  | $$| $$_____/    ')
        SCREEN.addstr(6, 0, '| $$/   \  $$|  $$$$$$$| $$| $$      | $$$$$$$/|  $$$$$$/| $$  | $$|  $$$$$$$ /$$')
        SCREEN.addstr(7, 0, '|__/     \__/ \_______/|__/|__/      |_______/  \______/ |__/  |__/ \_______/|__/')
        SCREEN.addstr(10, 0, winstr)
        SCREEN.addstr(11,0, 'Press Q to quit, or R to restart!')
    while True:
        key = SCREEN.getch()
        if key == ord('q'):   return False
        elif key == ord('r'): return True

def getTileLeft(x, y):
    cell = playfield[y][x]
    s = ''
    if [x, y] == CURSOR_POSITION:
        s += '['
        color = clGreen
    else:
        s += ' '
        color = clWhite
    return s, color

def getTileMiddle(x,y):
    cell = playfield[y][x]
    s = ''
    if cell == 0:
        s += ' '
        color = clWhite
    elif cell == UNKNOWN or cell == MINE:
        s += ' '
        color = clInverted
    elif cell == FLAG_MINE or cell == FLAG:
        s +=  'P'
        color = clRed
    else:
        # coloring the hints
        if cell == 1:   color = clCyan #cyan
        elif cell == 2: color = clBlue #blue
        else:           color = clYellow #yellow  
        s += str(cell)

    return s, color

def getTileRight(x, y):
    cell = playfield[y][x]
    selected = False
    s = ''
    if [x, y] == CURSOR_POSITION:
        s += ']'
        color = clGreen
    else:
        s += ' '
        color = clWhite
    return s, color

def print_playfield(playfield, screen):
    global score_x, score_y
    #print the matrix 
    currentline = 0
    screen.addstr(currentline, OFFSET-1, headline, clWhite)
    currentline +=1
    for rowindex, row in enumerate(playfield):
        screen.addstr(currentline, OFFSET-1, '│')
        pos = OFFSET
        for colindex, cell in enumerate(row):
            part, color = getTileLeft(colindex, rowindex)
            screen.addstr(currentline, pos, part, color)
            pos += 1
            part, color = getTileMiddle(colindex, rowindex)
            screen.addstr(currentline, pos, part, color)
            pos += 1
            part, color = getTileRight(colindex, rowindex)
            screen.addstr(currentline, pos, part, color)
            pos += 1
            screen.addstr(currentline, pos, '│')
            pos += 1
        currentline +=1
        if(rowindex < len(row)-1):
            screen.addstr(currentline, 10, midline)
            currentline +=1
    screen.addstr(currentline, 10, tailline)
    currentline +=1
    #get a centered position below the playfield:
    score_y = currentline
    score_x = int(pos/2)

def hit(x, y):
    global playfield, FIELDS_CLEARED
    if playfield[y][x] == UNKNOWN:
        #get the number that should be printed in the cell
        hint = calculate_hint(x, y)
        playfield[y][x] = hint
        FIELDS_CLEARED += 1
        if hint == NOTHING:
            #we hit a 0 or empty field, so we need to hit all the fields around it
            #first, step through the 8 or less surrounding fields
            for i in range(x-1, x+2):
                for j in range(y-1, y+2):
                    if i >= 0 and i < width:
                        if j >= 0 and j< height:
                            if playfield[j][i] == UNKNOWN:
                                #player has not opened this field yet
                                hit(i,j)
    elif playfield[y][x] == MINE:
        return True

def check_score():
    return FIELDS_CLEARED == (width*height)-MINECOUNT
        

def place_flag(x, y):
    global playfield, FLAGCOUNT
    if playfield[y][x] == MINE:
        playfield[y][x] = FLAG_MINE
        FLAGCOUNT += 1
    elif playfield[y][x] == UNKNOWN:
        playfield[y][x] = FLAG
        FLAGCOUNT += 1
    elif playfield[y][x] == FLAG_MINE:
        playfield[y][x] = MINE
        FLAGCOUNT -= 1
    elif playfield[y][x] == FLAG:
        playfield[y][x] = UNKNOWN
        FLAGCOUNT -=1

def handle_input(k):
    global CURSOR_POSITION, firstmove
    if k == curses.KEY_LEFT:
        if CURSOR_POSITION[0] > 0:
            CURSOR_POSITION[0] -=1
        else:
            CURSOR_POSITION[0] = width-1
    elif k == curses.KEY_RIGHT:
        if CURSOR_POSITION[0] < width-1:
            CURSOR_POSITION[0] +=1    
        else:
            CURSOR_POSITION[0] = 0
    elif k == curses.KEY_UP:
        if CURSOR_POSITION[1] > 0:
            CURSOR_POSITION[1] -=1
        else:
            CURSOR_POSITION[1] = height-1
    elif k == curses.KEY_DOWN:
        if CURSOR_POSITION[1] < height-1:
            CURSOR_POSITION[1] += 1
        else:
            CURSOR_POSITION[1] = 0
    elif k == ord('f'):
        # only place flags after placing mines
        if FIELD_GENERATED:
            place_flag(CURSOR_POSITION[0], CURSOR_POSITION[1])
    elif k == ord(' '):
        if not firstmove:
            firstmove = True
        else:
            return hit(CURSOR_POSITION[0], CURSOR_POSITION[1]) 
    return False   

def print_footer(screen):
    scorestr = 'Mines: {} Flags: {} Difficulty: {}'.format(MINECOUNT, FLAGCOUNT, difficulty)
    controlstr = 'Arrow Keys: Move  F: Place flag   Space: Open field'
    score_xpos = int((score_x) - (len(scorestr)/2)) + int(OFFSET/2)
    control_xpos = int((score_x) - len(controlstr)/2) + int(OFFSET/2)
    if score_xpos < 0: score_xpos = 0
    if control_xpos < 0: control_xpos = 0
    screen.addstr(score_y, score_xpos, scorestr)
    screen.addstr(score_y+1, control_xpos, controlstr)

def setup_colors():
    global clWhite, clRed, clCyan, clBlue, clYellow, clGreen, clInverted
    curses.start_color()
    #curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_BLACK)
    curses.init_pair(2, curses.COLOR_RED, curses.COLOR_BLACK)
    curses.init_pair(3, curses.COLOR_CYAN, curses.COLOR_BLACK)
    curses.init_pair(4, curses.COLOR_BLUE, curses.COLOR_BLACK)
    curses.init_pair(5, curses.COLOR_YELLOW, curses.COLOR_BLACK)
    curses.init_pair(6, curses.COLOR_GREEN, curses.COLOR_BLACK)
    curses.init_pair(7, curses.COLOR_WHITE, curses.COLOR_WHITE)
    clWhite = curses.color_pair(0) #hardwired
    clRed = curses.color_pair(2)
    clCyan = curses.color_pair(3)
    clBlue = curses.color_pair(4)
    clYellow   = curses.color_pair(5)
    clGreen    = curses.color_pair(6)
    clInverted = curses.color_pair(7)

def reset():
    global firstmove,  playfield, FIELD_GENERATED, FIELDS_CLEARED, CURSOR_POSITION, FLAGCOUNT
    firstmove = False
    playfield = [[UNKNOWN for x in range(width)] for y in range(height)]
    FIELD_GENERATED = False
    FLAGCOUNT = 0
    FIELDS_CLEARED = 0
    CURSOR_POSITION = [0,0]
        
def main(stdscr):
    global SCREEN, firstmove, FIELD_GENERATED, FIELDS_CLEARED, playfield, CURSOR_POSITION
    SCREEN = stdscr
    stdscr.clear()
    setup_strings(width)
    setup_colors()
    while(True):
        reset()
        while(True): #game loop
            print_playfield(playfield, stdscr)
            key = stdscr.getch()
            if handle_input(key):
                restart = gameover(False) #user hit a mine
                if restart: 
                    stdscr.clear()
                    break
                else: endgame()
            if (firstmove) and not (FIELD_GENERATED):
                #generate the field
                setup_playfield(width, height, CURSOR_POSITION[0], CURSOR_POSITION[1])
                #do this a second time, because we didn't know what the field would be the first time
                handle_input(key)
                STARTTIME = time.time()
            if check_score():
                #player wins!
                restart = gameover(True) # does user want restart?
                if restart: 
                    stdscr.clear()
                    break
                else: endgame()  
            print_footer(stdscr)
            stdscr.refresh()
if __name__ == "__main__":
    try:
        wrapper(main)
    except KeyboardInterrupt:
        sys.exit(0)